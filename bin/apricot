#!/usr/bin/env ruby

file = __FILE__
file = File.readlink(file) while File.symlink? file
$LOAD_PATH.unshift(File.expand_path('../../lib', file))

require 'apricot'

evals = []
bytecode = false

options = Rubinius::Options.new "Usage: #{$0} [options] [program]", 20
options.doc "OPTIONS:"

options.on "-e", "CODE", "evaluate CODE and print the result" do |code|
  evals << [:eval, code]
end

options.on "-B", "--bytecode", "print bytecode after compiling" do
  bytecode = true
end

options.on "-h", "--help", "display this help" do
  puts options
  exit
end

options.parse(ARGV).each do |file|
  evals << [:file, file]
end

if evals.empty?
  if $stdin.tty?
    require 'readline'
    while code = Readline.readline("apr> ")
      next if code.strip.empty?
      begin
        cm = Apricot::Compiler.compile_string code, "(eval)", bytecode
        value = Rubinius.run_script(cm)
        puts "=> #{value.inspect}"
      rescue => e
        puts "#{e.class}: #{e.message}"
      end
    end
  else
    evals << [:eval, STDIN.read, "(stdin)"]
  end
end

evals.each do |type, *args|
  case type
  when :eval
    cm = Apricot::Compiler.compile_string args[0], args[1], bytecode
    Rubinius.run_script cm
  when :file
    cm = Apricot::Compiler.compile args[0], nil, bytecode
    Rubinius.run_script cm
  end
end
