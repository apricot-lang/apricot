; The core apricot library

(ns Apricot::Core)

(def raise (. Kernel method :raise))

(def list
  (fn [& args]
    (.to_list args)))

(def concat
  (fn [& args]
    (.to_list (.reduce (.map args | :to_a) [] :+))))

(def defn
  (fn [name args & body]
    (list 'def name (concat (list 'fn name args) body))))
(.add (.macros *ns*) :defn)

(defn defmacro [name args & body]
  (list 'do
        (concat (list 'defn name args) body)
        (list '.add (list '.macros '*ns*) (.name name))
        name))
(.add (.macros *ns*) :defmacro)

(defn array [& args] args)

(defn set [& args]
  (.new Set args))

(defn hash [& args]
  (if (.even? (.length args))
    (let [h {}]
      (.each_slice args 2 | #(.store h %1 %2))
      h)
    (raise ArgumentError "hash requires an even number of arguments")))

(defn cons [head tail]
  (.cons (.to_list tail) head))

(defn apply [f x & more]
  (if (.empty? more)
    (.apricot_call f & x)
    (.apricot_call f & (cons x (.concat more (.pop more))))))

;; At this point everything is defined that syntax quote requires

(defn identifier [name]
  (.intern Apricot::Identifier name))

; TODO make prefix optional
(defn gensym [prefix]
  (identifier (.gensym Apricot prefix)))

(defn require [& files]
  ; (. Kernel require %) does not call the Rubygems custom require for some
  ; reason, so we use this method. (MAIN is the special toplevel object).
  (.each files | #(. MAIN send :require %)))

(def puts (. Kernel method :puts))
(def macroexpand (. Apricot method :macroexpand))
(def macroexpand-1 (. Apricot method :macroexpand_1))

; Type predicates

(defn instance? [c x]
  (.is_a? x c))

(defn module? [x]
  (instance? Module x))

(defn class? [x]
  (instance? Class x))

(defn array? [x]
  (instance? Array x))

(defn list? [x]
  (instance? Apricot::List x))

(defn hash? [x]
  (instance? Hash x))

(defn set? [x]
  (instance? Set x))

(defn string? [x]
  (instance? String x))

(defn regexp? [x]
  (instance? Regexp x))

(defn identifier? [x]
  (instance? Apricot::Identifier x))

(defn symbol? [x]
  (instance? Symbol x))

(defn number? [x]
  (instance? Numeric x))

(defn ratio? [x]
  (instance? Rational x))

(defn integer? [x]
  (instance? Integer x))

(defn float? [x]
  (instance? Float x))

(defn complex? [x]
  (instance? Complex x))

(defn range? [x]
  (instance? Range x))

(defn comparable? [x]
  (instance? Comparable x))

(defn enumerable? [x]
  (instance? Enumerable x))

; Collection functions

(defn first [coll]
  (.first coll))

(defn rest [coll]
  (.drop coll 1))

(defn second [coll]
  (first (rest coll)))

(defn last [coll]
  (.last coll))

(defn butlast [coll]
  (if (empty? coll)
    []
    (.take coll (. (.count coll) - 1))))

(defn count [coll]
  (.count coll))

(defn take [n coll]
  (.take coll n))

(defn drop [n coll]
  (.drop coll n))

(defn empty? [coll]
  (.empty? coll))

(defn map [f coll & colls]
  (if (empty? colls)
    (.map coll | f)
    (.map (.zip coll & colls) | #(apply f %))))

; Basic logic predicates and functions

(defn nil? [x]
  (.nil? x))

(defn true? [x]
  (.equal? x true))

(defn false? [x]
  (.equal? x false))

(defn not [x]
  (if x false true))

; Number predicates and functions

(defn zero? [x]
  (.zero? x))

(defn pos? [x]
  (. x > 0))

(defn neg? [x]
  (. x < 0))

(defn even? [x]
  (.even? x))

(defn odd? [x]
  (.odd? x))

(defn + [& args]
  (.reduce args 0 :+))

(defn * [& args]
  (.reduce args 1 :*))

(defn - [x & more]
  (if (empty? more)
    (. x -@) ; Ruby's horribly named -@ method is the negation operator
    (.reduce (.unshift more x) :-)))

(defn / [x & more]
  (if (empty? more)
    (.quo 1 x)
    (.reduce (.unshift more x) :quo)))

(defn inc [x] (+ x 1))
(defn dec [x] (- x 1))

; Useful macros

(defmacro when [test & body]
  `(if ~test (do ~@body)))

(defmacro when-not [test & body]
  `(if ~test nil (do ~@body)))

(defmacro .. [x form & more]
  (if (empty? more)
    `(. ~x ~form)
    `(.. (. ~x ~form) ~@more)))

; TODO make else optional
(defmacro if-let [bindings then else]
  `(let [temp# ~(bindings 1)]
     (if temp#
       (let ~bindings
         ~then)
       ~else)))

(defmacro cond [& clauses]
  (when-not (even? (count clauses))
    (raise ArgumentError "cond requires an even number of forms"))
  (when-not (empty? clauses)
    `(if ~(first clauses)
       ~(second clauses)
       (cond ~@(drop 2 clauses)))))

; (case form when* else?)
;   when = [expr+] expr
;   else = expr
;
; Works like Ruby's case/when syntax (uses the === method).
;
; Example:
; (case x
;   [Array] "x is an array"
;   [String Symbol] "x is a string or symbol"
;   "x is unknown")
(defmacro case [x & forms]
  (let [else (if (odd? (count forms))
               (.pop forms))
        val (gensym "case")
        expand (fn expand [& forms]
                 (if (empty? forms)
                   else
                   `(if (or ~@(map (fn [test] `(. ~test === ~val))
                                   (first forms)))
                      ~(second forms)
                      ~(apply expand (drop 2 forms)))))]
    `(let [~val ~x]
       ~(apply expand forms))))

(defmacro and [& forms]
  (cond
    (empty? forms) true
    (= (count forms) 1) (first forms)
    :else `(let [and# ~(first forms)]
             (if and# (and ~@(rest forms)) and#))))

(defmacro or [& forms]
  (cond
    (empty? forms) false
    (= (count forms) 1) (first forms)
    :else `(let [or# ~(first forms)]
             (if or# or# (or ~@(rest forms))))))

; Equality and inequality

(defn identical? [x y]
  (.equal? x y))

(defn = [x & more]
  (.all? more | #(. x == %)))

(defn not= [x & more]
  (not (apply = x more)))

(defn compare [x y]
  (. x <=> y))

(defn > [x & more]
  (if (empty? more)
    true
    (.. (.unshift more x) (each_cons 2) (all? | #(. %1 > %2)))))

(defn >= [x & more]
  (if (empty? more)
    true
    (.. (.unshift more x) (each_cons 2) (all? | #(. %1 >= %2)))))

(defn < [x & more]
  (if (empty? more)
    true
    (.. (.unshift more x) (each_cons 2) (all? | #(. %1 < %2)))))

(defn <= [x & more]
  (if (empty? more)
    true
    (.. (.unshift more x) (each_cons 2) (all? | #(. %1 <= %2)))))

(defn max [x & more]
  (if (empty? more)
    x
    (.max (.unshift more x))))

(defn min [x & more]
  (if (empty? more)
    x
    (.min (.unshift more x))))

; Miscellaneous (to be sorted)

(defmacro each [binding & body]
  `(.each ~(last binding)
          | (fn [~(first binding)] ~@body)))

(defmacro while-let [binding & body]
  `(loop []
     (let ~binding
       (when ~(first binding)
         ~@body
         (recur)))))

(defn str [& args]
  (.reduce (.map args | :to_s) "" :+))

(defn identity [x] x)
